services:
  generator:
    image: golang:1.17-alpine
    working_dir: /app
    command: ["go", "run", "internal/cmd/generator/main.go"]
    volumes:
      - ".:/app"
    profiles:
      - manual

  database:
    container_name: db
    image: postgres:14-alpine
    ports:
      - 5432:5432
    networks:
      - default
    environment:
      - POSTGRES_USER=casino
      - POSTGRES_PASSWORD=casino
    volumes:
      - "./db:/db"

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    networks:
      - default
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    container_name: kafka
    depends_on:
      - zookeeper
    image: confluentinc/cp-kafka:latest
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - default
    healthcheck:
      test: kafka-cluster cluster-id --bootstrap-server kafka:9092 || exit 1
      interval: 1s
      timeout: 10s
      retries: 10
    restart: always

  init-kafka:
    container_name: init-kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - default
    command:
      - /bin/sh
      - -c
      - |
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic event-created --replication-factor 1 --partitions 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic event-currency --replication-factor 1 --partitions 1
